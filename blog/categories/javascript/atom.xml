<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Nazir Doğan Code Blog]]></title>
  <link href="http://nazrdogan.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://nazrdogan.github.io/"/>
  <updated>2018-01-20T14:31:18+03:00</updated>
  <id>http://nazrdogan.github.io/</id>
  <author>
    <name><![CDATA[Nazir Doğan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NVM İle Varsayılan Node.js Versiyonunu Ayarlama]]></title>
    <link href="http://nazrdogan.github.io/blog/2018/01/20/node-version-nvm/"/>
    <updated>2018-01-20T00:00:00+03:00</updated>
    <id>http://nazrdogan.github.io/blog/2018/01/20/node-version-nvm</id>
    <content type="html"><![CDATA[<p>Yaklaşık 2 aydır nvm kullanıyorum ve node.js versiyonları arası geçişte büyük kolaylık sağlıyor. Varsayılan versiyonu değiştirmem yükseltmem gerektiğinde biraz araştırma yaparak aşağıdaki komutları buldum. Umarım sizin de işinize yarar.</p>

<pre><code>
# İstediğiniz versiyonu yükleyin
nvm install 8.9.4

# Varsayılan olarak kullanın
nvm alias default 8.9.4

# Daha sonra node -v  yazarsanız varsayılan versiyonu verecektir.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Async/Await Ile Asenkron Javascript]]></title>
    <link href="http://nazrdogan.github.io/blog/2018/01/12/async-await-javascript/"/>
    <updated>2018-01-12T00:00:00+03:00</updated>
    <id>http://nazrdogan.github.io/blog/2018/01/12/async-await-javascript</id>
    <content type="html"><![CDATA[<p><img src="https://www.bram.us/wordpress/wp-content/uploads/2017/05/js-callbacks-promises-asyncawait.gif" alt="async-await" /></p>

<p>Yukardaki gif  Javascript geliştiricileri için oldukça büyük anlam ifade etse gerek. Javascript geliştiricleri yıllarca  asenkron kod yazmak için callback fonksiyonlarını ihtiyaç duyuyorlardı.</p>

<p>Sonuç olarak  birçoğumuz  &ldquo;callback hell&rdquo; ile karşı karşıya gelmek zorunda kaldık.</p>

<p>Neyse ki daha sonra ise Promise geldi. Bize callback fonksiyonlarından daha organize bir yapı sundu. ve halen birçok geliştirici tarafından sıklıkla kullanılmakta.</p>

<p> Son olarak ise Async/Await'in eklenmesiyle daha okunabilir ve bakımı kolay bir hale geldi.</p>

<h2>Nedir Bu  Async/Await ?</h2>

<p>Async/Await  uzun zamandır beklenen asenkron işlemleri daha anlaşılması kolay bir hale getiren Promise tabanlı Javascript özelliğidir.</p>

<p>Şimdi gelin Promise tabanlı bir örnek yapalım.</p>

<pre><code class="javascript">const fetch = require('node-fetch');

async function makeRequest() {
  const url = 'http://jsonplaceholder.typicode.com/posts/1';
  fetch(url).then( response =&gt; response.json())
    .then(result =&gt; {
      console.log(result.title); 
      console.log(result.body); 
  });
}

makeRequest();
</code></pre>

<p>Şimdi ise <code>async/await</code> fonksiyonuna nasıl dönüştüreceğimizi görelim. ilk olarak async anathar kelimesini fonksiyonuna ekliyoruz.
Daha sonra ise <code>.then()</code> kısmında aşağıdaki gibi değişiklik yapıp <code>await</code> ekliyoruz.</p>

<pre><code class="javascript">
const fetch = require('node-fetch');

async function makeRequest() {
  const url = "http://jsonplaceholder.typicode.com/posts/1";
  const response = await  fetch(url);
  const json = await response.json();
  console.log(json.title);
}

makeRequest();
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yarn Paket Yöneticisi Nedir ?]]></title>
    <link href="http://nazrdogan.github.io/blog/2017/11/18/yarn/"/>
    <updated>2017-11-18T00:00:00+03:00</updated>
    <id>http://nazrdogan.github.io/blog/2017/11/18/yarn</id>
    <content type="html"><![CDATA[<p><img src="https://yarnpkg.com/assets/og_image.png" alt="yarn" /></p>

<p>Facebook mühendisleri tarafından geliştirilmiş olan Yarn, hız ve güvenlik konusunda npm'den daha iyi olduğuna söz veriyor.</p>

<h2>Yarn kurulumu</h2>

<p>Yarn'ı kurmak için birçok yol bulunuyor. Eğer npm'e sahipseniz. npm ile yükleyebilirsiniz.</p>

<pre><code>
 npm install -g yarn
</code></pre>

<p>Başka bir yol ise (Yarn'ı geliştiren takımında önerdiği) işletim sistemizin native paket yöneticisi ile yüklemek.Eğer bir Mac kullanıcısıysanız  homebrew ile yükleyebilirsiniz.</p>

<pre><code>
 brew update
 brew install yarn
</code></pre>

<p>Diğer işletim sistemleri <a href="https://yarnpkg.com/en/docs/install">için</a></p>

<h2>Yarn CLI komutları</h2>

<ul>
<li>yarn add: aktif pakette kullanmak için bir paket ekler.</li>
<li>yarn init: yarn dosyasını oluşturur.</li>
<li>yarn install:  package.json dosysası içindekileri yükler.</li>
<li>yarn publish: paket yöneticisinde bir paketi yayınlar.</li>
<li>yarn remove: aktif paketten bir paketi siler.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Cordova Ve iOS'ta Uzaktan Hata Ayıklama]]></title>
    <link href="http://nazrdogan.github.io/blog/2016/08/30/apache-cordova-ios-debug/"/>
    <updated>2016-08-30T00:00:00+03:00</updated>
    <id>http://nazrdogan.github.io/blog/2016/08/30/apache-cordova-ios-debug</id>
    <content type="html"><![CDATA[<p>Bu yazımda Apache Cordova için iOS uygulamalarında uzaktan hata ayıklama nasıl yapılır onu göstereceğim.</p>

<h5>Hata Ayıklamayı  Etkinleştirme</h5>

<p>ilk olarak Safari'nin  &ldquo;Develop Menu&rdquo; kısmını etkinleştirmeniz gerekmekte. Bunun için Safari > Preferences ve  &ldquo;Show Develop Menu&rdquo; checkbox'unu seçilmiş oldugundan emin olalım.</p>

<p><img src="/assets/safari-debug-enable.png" alt="safari debug enabble" /></p>

<p>Şimdi ise iOS cihaz üzerinden gidip Web Denetçisini aktif hale getirmek.
Bunun için Ayarlar > Safari > ileri Düzey ve  Web Denetçisini aktif hale getirin.</p>

<p><img src="/assets/IMG_3736.PNG" alt="iphone debug enable" />
<img src="/assets/IMG_3737.PNG" alt="iphone debug enable" />
<img src="/assets/IMG_3738.PNG" alt="iphone debug enable" /></p>

<h5>Safari ile Hata ayıklama</h5>

<p>Gerekli ayarları yaptıktan sonra ise hata ayıklamaya geçebiliriz. Öncelikle uygulamayı cihazımızda başlatıyoruz. (Cihazımız USB ile bağlı olmalı) Daha sonra ise Safari'de Develop Menusünden  Cihazımızı seçerek hata ayıklama işlemini başlatabiliriz.</p>

<p><img src="/assets/safari-debug-1.png" alt="safari debug 1" />
<img src="/assets/safari-debug-2.png" alt="safari debug 2" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic 2 - Google Maps]]></title>
    <link href="http://nazrdogan.github.io/blog/2016/07/31/ionic2-googlemaps/"/>
    <updated>2016-07-31T00:00:00+03:00</updated>
    <id>http://nazrdogan.github.io/blog/2016/07/31/ionic2-googlemaps</id>
    <content type="html"><![CDATA[<p>Bu yazımda Ionic 2 uygulamalarında <strong>Google Maps</strong>&lsquo;ı nasıl ekleyeceğimiz ve <strong>ionic-native</strong> kullanarak konum bilgisini almayı öğreneceğiz.</p>

<p>Şimdi yeni bir ionic projesi oluşturarak başlayalım.</p>

<pre><code>ionic start ionic-maps blank --v2
cd ionic-maps
ionic platform add android
</code></pre>

<p>Daha sonra ise konum bilgisi alabilmek için <strong>Geolocation</strong> pluginini ekliyoruz.</p>

<pre><code>ionic plugin add cordova-plugin-geolocation
</code></pre>

<p>Google Maps'in script'ini <strong>index.html</strong>&lsquo;e ekliyoruz.</p>

<p>```
<body>
  <ion-app></ion-app></p>

<!-- Google Maps -->


<p> <script src="http://maps.googleapis.com/maps/api/js"></script></p>

<p>  <!-- cordova.js required for cordova apps -->
  <script src="cordova.js"></script>
  <!-- Polyfill needed for platforms without Promise and Collection support -->
  <script src="build/js/es6-shim.min.js"></script>
  <!-- Zone.js and Reflect-metadata  -->
  <script src="build/js/Reflect.js"></script>
  <script src="build/js/zone.js"></script>
  <!-- the bundle which is built from the app's source code -->
  <script src="build/js/app.bundle.js"></script>
</body>
```</p>

<p>Bunları ekledikten sonra <strong>angular/core</strong>&lsquo;dan <strong>OnInit</strong>'i ekliyoruz.</p>

<pre><code>
import {Component, OnInit} from '@angular/core';
</code></pre>

<p>Konum almak için ise Geolocation'i ekliyoruz.</p>

<pre><code>
import {Geolocation} from 'ionic-native';
</code></pre>

<p>Daha sonra fonksiyonumuzu yazıyoruz.</p>

<pre><code>
  loadMap() {
    Geolocation.getCurrentPosition().then((resp) =&gt; {
      var latlng = new google.maps.LatLng(resp.coords.latitude, resp.coords.longitude);
      var myOptions = {
        zoom: 8,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      var map = new google.maps.Map(document.getElementById("map"), myOptions);
    });
  }
</code></pre>

<p>Eğer <strong>Typescript</strong> yazıyorsanız Google Map'sin hata verdiğini göreceksiniz.</p>

<pre><code>
TypeScript error: /Users/nazirdogan/ionic-maps/app/pages/home/home.ts(21,24): Error TS2304: Cannot find name 'google'.
TypeScript error: /Users/nazirdogan/ionic-maps/app/pages/home/home.ts(25,20): Error TS2304: Cannot find name 'google'.
TypeScript error: /Users/nazirdogan/ionic-maps/app/pages/home/home.ts(27,21): Error TS2304: Cannot find name 'google'.
TypeScript error: typings/index.d.ts(2,1): Error TS6053: File 'typings/globals/google.maps/index.d.ts' not found.
</code></pre>

<p>Bu hatanın nedeni ise Typescript Definition dosyalarının olmamasıdır.</p>

<p>Bu hatayı gidermek için</p>

<pre><code> npm install typings --global   

 typings install dt~google.maps --global
</code></pre>

<p>Yukarıdaki gibi typings'i yüklersek projemizde typings klasörü altında globals klasörü içinde <strong>google.maps</strong> dosyaları yüklenecektir.</p>

<p>Yazdığımız fonksiyonu <strong>ngOnInit</strong> ile çagırıyoruz.</p>

<pre><code>
ngOnInit() {
    console.log('ngOnInit');
    this.loadMap();
  }
</code></pre>

<p>Html tarafında ise id'si map olan bir div oluşturuyoruz.</p>

<pre><code>&lt;ion-header&gt;
  &lt;ion-navbar&gt;
    &lt;ion-title&gt;
      Google Maps
    &lt;/ion-title&gt;
  &lt;/ion-navbar&gt;
&lt;/ion-header&gt;
&lt;ion-content scroll="false"&gt;
  &lt;div id="map"&gt;&lt;/div&gt;
&lt;/ion-content&gt;
</code></pre>

<p>sass dosyamız</p>

<pre><code>.home {

}
.scroll {
    height: 100%;
}

#map {
    width: 100%;
    height: 100%;

}
</code></pre>

<p><img src="/assets/ionic-maps.png" alt="project structure" /></p>

<p>Projenin Github <a href="https://github.com/nazrdogan/ionic-maps">linki</a></p>
]]></content>
  </entry>
  
</feed>
